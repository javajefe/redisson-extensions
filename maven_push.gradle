apply plugin: 'maven'
apply plugin: 'signing'
 
def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

def sonatypeRepositoryUrl
if (isReleaseBuild()) {
    println 'RELEASE BUILD'
    sonatypeRepositoryUrl = hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else {
    println 'SNAPSHOT BUILD'
    sonatypeRepositoryUrl = hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}
 
def getRepositoryUsername() {
    return hasProperty('nexusUsername') ? nexusUsername : ""
}
 
def getRepositoryPassword() {
    return hasProperty('nexusPassword') ? nexusPassword : ""
}
 
afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
 
                pom.artifactId = POM_ARTIFACT_ID
 
                repository(url: sonatypeRepositoryUrl) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
 
                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL
 
                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }
 
                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }
 
                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }
 
    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }
 
    javadoc {
        source = sourceSets.main.allJava
        classpath = configurations.compileClasspath
        options {
            setMemberLevel JavadocMemberLevel.PUBLIC
            setAuthor true
            links "https://docs.oracle.com/javase/8/docs/api/"
        }
    }

    task javadocsJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc
    }
 
    task sourceJar(type: Jar) {
      classifier = 'sources'
      from sourceSets.main.allJava
    }

    artifacts {
        archives sourceJar
        archives javadocsJar
    }
}
